import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error, r2_score
from src.DAO.DAOimpl import FirebaseDAO
from src.Generation.Feature_engineering import engineer_all_features
from src.Generation.model_utils import save_pipeline


def get_all_transactions(email):
    user_dao = FirebaseDAO("user")
    all_transactions = []
    if not email:
        return []

    transactions = user_dao.read_user_transactions(identifier=email)
    for t in transactions:
        t["user_email"] = email
        all_transactions.append(t)

    return all_transactions


# --- 1. Adatok bet√∂lt√©se √©s feature engineering ---
data = get_all_transactions("aliciacantu@gmail.com")
df = pd.DataFrame(data)
if df.empty:
    raise ValueError("Nincs el√©rhet≈ë tranzakci√≥ az adott emailhez.")

df = engineer_all_features(df)

# --- 2. C√©lv√°ltoz√≥ (target) defini√°l√°sa ---
TARGET = 'amount'
if TARGET not in df.columns:
    raise ValueError(f"A '{TARGET}' oszlop nem tal√°lhat√≥ meg a dataframe-ben.")

# --- 3. H√≥nap szerinti √∂sszes√≠t√©s (id≈ësor el≈ëk√©sz√≠t√©se) ---
df['month'] = df['date'].dt.month  # Felt√©telezve, hogy van 'date' oszlopod, ami d√°tum t√≠pus√∫
monthly_sum = df.groupby('month')[TARGET].sum()

print("H√≥nap szerinti √∂sszegz√©s:\n", monthly_sum)

# --- 4. SARIMA modell alkalmaz√°sa ---
train_data = monthly_sum.values  # Haszn√°ljuk a havi √∂sszegeket

# SARIMA modell param√©terez√©se (p, d, q) x (P, D, Q, s), ahol s = szezon√°lis peri√≥dus
seasonal_order = (1, 1, 1, 12)  # 12 h√≥napos szezon√°lis ciklus (√©ves hat√°s)
model = SARIMAX(train_data, order=(1, 1, 1), seasonal_order=seasonal_order)

# Modell tan√≠t√°sa
model_fit = model.fit()

# 12 h√≥napos el≈ërejelz√©s (az √©v h√°tral√©v≈ë r√©sz√©re)
forecast = model_fit.forecast(steps=10)

# Az utols√≥ 12 h√≥nap kiv√°laszt√°sa az eredeti adatokb√≥l (teszt adatok)
test_data = train_data[-10:]  # Ezt b≈ëv√≠tsd ki, ha t√∂bb h√≥napra van sz√ºks√©g

# Ellen≈ërizz√ºk, hogy a m√©retek megegyeznek
if len(test_data) == len(forecast):
    mse = mean_squared_error(test_data, forecast)
    r2 = r2_score(test_data, forecast)
else:
    print(f"‚ö†Ô∏è Figyelmeztet√©s: Az el≈ërejelz√©s ({len(forecast)}) √©s a tesztadatok ({len(test_data)}) hossza nem egyezik.")
    mse = None
    r2 = None

print(f"üéØ SARIMA Modell MSE: {mse}, R¬≤: {r2}")

# --- 5. El≈ërejelz√©s vizualiz√°l√°sa ---
plt.figure(figsize=(10, 6))
plt.plot(monthly_sum.index, monthly_sum.values, label='Val√≥s adatok', color='blue')
plt.plot(range(len(monthly_sum), len(monthly_sum) + len(forecast)), forecast, label='El≈ërejelz√©s', color='red', linestyle='--')
plt.xlabel("H√≥nap")
plt.ylabel("K√∂lt√©s (√ñsszeg)")
plt.title("SARIMA El≈ërejelz√©s (K√∂vetkez≈ë 12 h√≥nap)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()


print(forecast)
